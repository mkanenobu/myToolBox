#!/bin/bash
### Script runner for multi language

set -Ceu

VERSION="0.1.0"
usage_text="usage: run [SOURCE_FILE] [ARGUMENTS]"
if [ "$#" -eq 0 ]; then
  echo "${usage_text}"
  exit 1
fi

if [[ $1 =~ (-|--)(h|help) ]]; then
  echo "${usage_text}"
  exit 0
elif [[ $1 =~ (-|--)(v|version) ]]; then
  echo "Version: ${VERSION}"
  exit 0
fi

source_file="${1}"
args="${@:2}"
file_extension="$(echo "${source_file}" | sed 's/^.*\.\([^\.]*\)$/\1/')"
tmp_dir="/tmp/runner"
exec_file="${tmp_dir}/a.out"
needs_copile_flg=0

runner=""

# C-lang
[ "$(which clang)" ] && c_compiler="clang" \
  || [ "$(which gcc)" ] && c_compiler="gcc" \
  || c_compiler="cc"

# C++
[ "$(which clang++)" ] && cpp_compiler="clang++" \
  || [ "$(which g++)" ] && cpp_compiler="g++" \
  || cpp_compiler="c++"

# Scheme
[ "$(which scheme)" ] && scheme_runner="scheme --quiet < " \
  || [ "$(which gosh)" ] && scheme_runner="gosh" \

lisp_runner="sbcl --script"
forth_runner="gforth"

[ "$(which stack)" ] && haskell_stack=true || haskell_stack=false

# user_setting="${XDG_CONFIG_HOME}/runner/user_setting"
# if [ -e "${user_setting}" ]; then
#   source "${user_setting}"
# fi

shebang="$(head -n 1 "${source_file}")"

# FIXME: shebangがこのスクリプトの場合、無限ループ？
if [[ "${shebang}" =~ ^\#\!/ ]]; then
  runner="${shebang//\#\!/}"
else
  case "${file_extension}" in
    # need to compile
    "c"   ) runner="${c_compiler} -o ${exec_file}"; needs_copile_flg=1 ;;
    "cpp" ) runner="${cpp_compiler} -o ${exec_file}"; needs_copile_flg=1 ;;
    "rs"  ) runner="rustc -o ${exec_file}"; needs_copile_flg=1 ;;
    "nim" ) runner="nim c -o:${exec_file} --nimcache:${tmp_dir}"; needs_copile_flg=1 ;;
    "pas" ) runner="fpc -o${exec_file}"; needs_copile_flg=1 ;;
    "ml"  ) runner="ob -o ${exec_file}"; needs_copile_flg=1 ;;

    "go"  ) runner="go run" ;;
    "hs"  ) runner="$(if [ "${haskell_stack}" ]; then echo "stack "; fi) runghc" ;;
    "zig" ) runner="zig run" ;;
    "sh"  ) runner="sh" ;;
    "bash") runner="bash" ;;
    "php" ) runner="php" ;;
    "py"  ) runner="python3" ;;
    "rb"  ) runner="ruby" ;;
    "lua" ) runner="lua" ;;
    "js"  ) runner="node" ;;
    "fs" | "fth"  ) runner="${forth_runner}"; args="${args} -e bye";;
    "scm" ) runner="${scheme_runner}" ;;
    "rkt" ) runner="racket -r" ;;
    "cl" | "lisp" ) runner="${lisp_runner}" ;;
    * ) echo "File is not supported"; exit 1 ;;
  esac
fi

# Catch SIGINT then clean tmp_dir
trap 'clear_tmp' {1,2,3,15}

function clear_tmp() {
  if [ -e "${tmp_dir}" ]; then
    rm -r "${tmp_dir}"
  fi
}

function main() {
  if [ -n "${runner}" ] && [ "${needs_copile_flg}" -eq 0 ]; then
    eval "${runner} ${source_file} ${args}"
  elif [ "${needs_copile_flg}" -eq 1 ]; then
    if [ ! -e "${tmp_dir}" ]; then
      mkdir -p "${tmp_dir}"
    fi
    eval "${runner} ${source_file}" && \
      chmod +x "${exec_file}" && \
      ${exec_file} "${args}"
    clear_tmp
  else
    echo "Error occurred!"
    exit 1
  fi
}

main

