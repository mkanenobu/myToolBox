#!/usr/bin/env bash

### ocamlbuild wrapper
{

set -Ceu

if [ $# -eq 0 ]; then
  exit 1
elif [[ ${1} =~ (-h|--help)  ]]; then
  cat << EOL
USAGE: ob [OPTIONS] [FILENAME]
  This script is wrapper of ocamlbuild

OPTIONS:
  -o: Output file name
  -h, -help: Show this help
EOL
  exit 2
fi

sourcefile="${!#}"
path="$(dirname "${sourcefile}")"
filename="$(basename "${sourcefile}")"
filename_wo_ext="${filename%.*}"
excutablename="${filename_wo_ext}"

options=""

if [ ! -f "${sourcefile}" ]; then
  echo "File not found"
  exit 1
fi

# options parser
counter=1
output_file_flg=0
# no exec file
lib_flg=0
for e in "$@"; do
  if [ "${counter}" -eq "$#" ]; then
    break
  elif [ "$e" == "-o" ]; then
    output_file_flg=1
  elif [ "${output_file_flg}" -eq 1 ]; then
    excutablename="$e"
  elif [ "$e" == "-lib" ]; then
    lib_flg=1
  else
    options="${options} ${e}"
  fi
  counter=$((counter + 1))
done

# resolve dependencies
# FIXME: モジュール名は snake case だがパッケージの名前は kebab case のものが存在する
# TODO: openされていないが使用されているモジュールをリンクするように
installed_lib_list="$(ocamlfind list | cut -d ' ' -f 1)"
opening_libs="$(cat "${sourcefile}" 2>/dev/null | grep -e '^open *' | sed -e 's/;;//g' | cut -d ' ' -f 2)"
pkgs=""
for lib in ${opening_libs}; do
  if [ -n "$(echo "${installed_lib_list}" | grep -e "^${lib,}$")" ]; then
    pkgs="-pkg ${lib,} ${pkgs}"
  fi
done

# build
cd "${path}" && ocamlbuild \
  -use-ocamlfind \
  -r ${pkgs} -lib str \
  -tag thread -tag native -tag bin_annot \
  ${options} "${filename_wo_ext}.native"

# copy exec file
if [ "$?" -eq 0 ]; then
  if unlink "${filename_wo_ext}.native" && [ "$lib_flg" -eq 0 ]; then
    cp _build/"${filename_wo_ext}.native" "${excutablename}"
  fi
else
  # clean if build failed
  ocamlbuild -clean
fi

# clean files
if [ -x "_build/${filename_wo_ext}.native" ]; then
  rm _build/${filename_wo_ext}.native
fi

if [ -e "_build/${filename_wo_ext}.o" ]; then
  rm _build/${filename_wo_ext}.o
fi

}
