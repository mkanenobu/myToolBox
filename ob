#!/usr/bin/env bash

### ocamlbuild wrapper
{

if [[ ${1} =~ (|-|--)help  ]]; then
  echo "USAGE: ob [OPTIONS] [FILENAME]"
  echo "  This script is wrapper of ocamlbuild"
  echo 
  echo "OPTIONS:"
  echo "  -o: Output file name"
fi

sourcefile="${!#}"
path="$(dirname "${sourcefile}")"
filename="$(basename "${sourcefile}")"
filename_wo_ext="${filename%.*}"
excutablename="${filename_wo_ext}"

options=""

if [ ! -f "${sourcefile}" ]; then
  echo "File not found"
  exit 1
fi

# -o option parser
counter=1
output_file_flg=0
for e in "$@"; do
  if [ "${counter}" -eq "$#" ]; then
    break
  elif [ "$e" == "-o" ]; then
    output_file_flg=1
  elif [ "${output_file_flg}" -eq 1 ]; then
    excutablename="$e"
  else
    options="${options} ${e}"
  fi
  counter=$((counter + 1))
done

# build
cd "${path}" && ocamlbuild \
  -use-ocamlfind \
  -r -pkg core -lib str \
  -tag thread -tag native \
  ${options} "${filename_wo_ext}.native"

if [ "$?" -eq 0 ]; then
  unlink "${filename_wo_ext}.native" \
  && cp _build/"${filename_wo_ext}.native" "${excutablename}"
else
  # clean if build failed
  ocamlbuild -clean
fi

# clean files
if [ -x "_build/${filename_wo_ext}.native" ]; then
  rm _build/${filename_wo_ext}.native
fi

if [ -e "_build/${filename_wo_ext}.o" ]; then
  rm _build/${filename_wo_ext}.o
fi

}
